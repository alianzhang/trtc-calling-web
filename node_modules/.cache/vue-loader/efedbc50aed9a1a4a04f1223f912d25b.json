{"remainingRequest":"/Users/xuzhitao/Desktop/Web/TRTCScenesDemo/trtc-calling-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xuzhitao/Desktop/Web/TRTCScenesDemo/trtc-calling-web/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/xuzhitao/Desktop/Web/TRTCScenesDemo/trtc-calling-web/src/App.vue","mtime":1604998570000},{"path":"/Users/xuzhitao/Desktop/Web/TRTCScenesDemo/trtc-calling-web/node_modules/css-loader/dist/cjs.js","mtime":1610420041655},{"path":"/Users/xuzhitao/Desktop/Web/TRTCScenesDemo/trtc-calling-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1610420042252},{"path":"/Users/xuzhitao/Desktop/Web/TRTCScenesDemo/trtc-calling-web/node_modules/postcss-loader/src/index.js","mtime":1597388791021},{"path":"/Users/xuzhitao/Desktop/Web/TRTCScenesDemo/trtc-calling-web/node_modules/cache-loader/dist/cjs.js","mtime":1610420035136},{"path":"/Users/xuzhitao/Desktop/Web/TRTCScenesDemo/trtc-calling-web/node_modules/vue-loader/lib/index.js","mtime":1610420042252}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpodG1sLApib2R5IHsKICBtYXJnaW46IDA7CiAgcGFkZGluZzogMDsKICBoZWlnaHQ6IDEwMCU7Cn0KI2FwcCB7CiAgZm9udC1mYW1pbHk6IEF2ZW5pciwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsKICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsKICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBjb2xvcjogIzJjM2U1MDsKICBtYXJnaW46IDA7CiAgcGFkZGluZzogMDsKICBiYWNrZ3JvdW5kOiBhbGljZWJsdWU7CiAgaGVpZ2h0OiAxMDAlOwp9CkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KSB7CiAgLmVsLW1lc3NhZ2UgewogICAgbWluLXdpZHRoOiAxODBweDsKICB9Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <header-nav></header-nav>\n    <transition name=\"fade\" mode=\"out-in\">\n      <router-view class=\"view\"></router-view>\n    </transition>\n    <el-dialog :title=\"callTypeDisplayName\" :visible.sync=\"isShowNewInvitationDialog\" width=\"400px\">\n      <span>{{this.getNewInvitationDialogContent()}}</span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"handleRejectCall\">拒绝</el-button>\n        <el-button type=\"primary\" @click=\"handleDebounce(handleAcceptCall, 500)\">接听</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport { log } from \"./utils\";\nimport { getUsernameByUserid } from \"./service\";\nimport HeaderNav from \"./components/header-nav\";\nlet timeout;\n\nexport default {\n  name: \"App\",\n  components: {\n    HeaderNav\n  },\n  watch: {\n    isLogin: function(newIsLogin, oldIsLogin) {\n      if (newIsLogin !== oldIsLogin) {\n        if (newIsLogin) {\n          if (this.$router.history.current.path === \"/login\") {\n            // 防止已在 '/' 路由下再次 push\n            this.$router.push(\"/\");\n          }\n        } else {\n          this.$router.push(\"/login\");\n        }\n      }\n    }\n  },\n  computed: mapState({\n    isLogin: state => state.isLogin,\n    loginUserInfo: state => state.loginUserInfo,\n    callStatus: state => state.callStatus,\n    meetingUserIdList: state => state.meetingUserIdList,\n    muteVideoUserIdList: state => state.muteVideoUserIdList,\n    muteAudioUserIdList: state => state.muteAudioUserIdList\n  }),\n  async created() {\n    this.initListener();\n    await this.handleAutoLogin();\n  },\n  data() {\n    return {\n      isInviterCanceled: false,\n      isShowNewInvitationDialog: false,\n      inviterName: \"\",\n      callTypeDisplayName: \"\",\n      inviteData: {},\n      inviteID: \"\"\n    };\n  },\n  destroyed() {\n    this.removeListener();\n  },\n  methods: {\n    handleAutoLogin: async function() {},\n    initListener: function() {\n      this.$trtcCalling.on(this.TrtcCalling.EVENT.ERROR, this.handleError);\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.INVITED,\n        this.handleNewInvitationReceived\n      );\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.USER_ENTER,\n        this.handleUserEnter\n      );\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.USER_LEAVE,\n        this.handleUserLeave\n      );\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.REJECT,\n        this.handleInviteeReject\n      );\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.LINE_BUSY,\n        this.handleInviteeLineBusy\n      );\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.CALLING_CANCEL,\n        this.handleInviterCancel\n      );\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.KICKED_OUT,\n        this.handleKickedOut\n      );\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.CALLING_TIMEOUT,\n        this.handleCallTimeout\n      );\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.NO_RESP,\n        this.handleNoResponse\n      );\n      this.$trtcCalling.on(this.TrtcCalling.EVENT.CALL_END, this.handleCallEnd);\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.USER_VIDEO_AVAILABLE,\n        this.handleUserVideoChange\n      );\n      this.$trtcCalling.on(\n        this.TrtcCalling.EVENT.USER_AUDIO_AVAILABLE,\n        this.handleUserAudioChange\n      );\n    },\n    removeListener: function() {\n      this.$trtcCalling.off(this.TrtcCalling.EVENT.ERROR, this.handleError);\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.INVITED,\n        this.handleNewInvitationReceived\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.USER_ENTER,\n        this.handleUserEnter\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.USER_LEAVE,\n        this.handleUserLeave\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.REJECT,\n        this.handleInviteeReject\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.LINE_BUSY,\n        this.handleInviteeLineBusy\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.CALLING_CANCEL,\n        this.handleInviterCancel\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.KICKED_OUT,\n        this.handleKickedOut\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.CALLING_TIMEOUT,\n        this.handleCallTimeout\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.NO_RESP,\n        this.handleNoResponse\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.CALL_END,\n        this.handleCallEnd\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.USER_VIDEO_AVAILABLE,\n        this.handleUserVideoChange\n      );\n      this.$trtcCalling.off(\n        this.TrtcCalling.EVENT.USER_AUDIO_AVAILABLE,\n        this.handleUserAudioChange\n      );\n    },\n    handleError: function() {},\n    handleNewInvitationReceived: async function(payload) {\n      const { inviteID, sponsor, inviteData } = payload;\n      log(`handleNewInvitationReceived ${JSON.stringify(payload)}`);\n      if (inviteData.callEnd) {\n        // 最后一个人发送 invite 进行挂断\n        this.$store.commit(\"updateCallStatus\", \"idle\");\n        return;\n      }\n      if (sponsor === this.loginUserInfo.userId) {\n        // 邀请人是自己, 同一个账号有可能在多端登录\n        return;\n      }\n      // 这里需要考虑忙线的情况\n      if (this.callStatus === \"calling\" || this.callStatus === \"connected\") {\n        await this.$trtcCalling.reject({ inviteID, isBusy: true });\n        return;\n      }\n\n      const { callType } = inviteData;\n      this.inviteData = inviteData;\n      this.inviteID = inviteID;\n      this.isInviterCanceled = false;\n      this.$store.commit(\"updateIsInviter\", false);\n      this.$store.commit(\"updateCallStatus\", \"calling\");\n      const userName = sponsor;\n      this.inviterName = userName;\n      this.callTypeDisplayName =\n        callType === this.TrtcCalling.CALL_TYPE.AUDIO_CALL\n          ? \"语音通话\"\n          : \"视频通话\";\n      this.isShowNewInvitationDialog = true;\n    },\n    getNewInvitationDialogContent: function() {\n      return `来自${this.inviterName}的${this.callTypeDisplayName}`;\n    },\n    handleRejectCall: async function() {\n      try {\n        const { callType } = this.inviteData;\n        await this.$trtcCalling.reject({\n          inviteID: this.inviteID,\n          isBusy: false,\n          callType\n        });\n        this.dissolveMeetingIfNeed();\n      } catch (e) {\n        this.dissolveMeetingIfNeed();\n      }\n    },\n\n    handleDebounce: function(func, wait) {\n      let context = this;\n      let args = arguments;\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        func.apply(context, args);\n      }, wait);\n    },\n\n    handleAcceptCall: async function() {\n      try {\n        const { callType, roomID } = this.inviteData;\n        this.$store.commit(\"userJoinMeeting\", this.loginUserInfo.userId);\n        await this.$trtcCalling.accept({\n          inviteID: this.inviteID,\n          roomID,\n          callType\n        });\n        this.isShowNewInvitationDialog = false;\n        if (\n          callType === this.TrtcCalling.CALL_TYPE.AUDIO_CALL &&\n          this.$router.history.current.fullPath !== \"/audio-call\"\n        ) {\n          this.$router.push(\"/audio-call\");\n        } else if (\n          callType === this.TrtcCalling.CALL_TYPE.VIDEO_CALL &&\n          this.$router.history.current.fullPath !== \"/video-call\"\n        ) {\n          this.$router.push(\"/video-call\");\n        }\n      } catch (e) {\n        this.dissolveMeetingIfNeed();\n      }\n    },\n    handleUserEnter: function({ userID }) {\n      // 建立连接\n      this.$store.commit(\"userJoinMeeting\", userID);\n      if (this.callStatus === \"calling\") {\n        // 如果是邀请者, 则建立连接\n        this.$nextTick(() => {\n          // 需要先等远程用户 id 的节点渲染到 dom 上\n          this.$store.commit(\"updateCallStatus\", \"connected\");\n        });\n      } else {\n        // 第n (n >= 3)个人被邀请入会, 并且他不是第 n 个人的邀请人\n        this.$nextTick(() => {\n          // 需要先等远程用户 id 的节点渲染到 dom 上\n          this.$trtcCalling.startRemoteView({\n            userID: userID,\n            videoViewDomID: `video-${userID}`\n          });\n        });\n      }\n    },\n    handleUserLeave: function({ userID }) {\n      if (this.meetingUserIdList.length == 2) {\n        this.$store.commit(\"updateCallStatus\", \"idle\");\n      }\n      this.$store.commit(\"userLeaveMeeting\", userID);\n    },\n    handleInviteeReject: async function({ userID }) {\n      const userName = await getUsernameByUserid(userID);\n      this.$message.warning(`${userName}拒绝通话`);\n      this.dissolveMeetingIfNeed();\n    },\n    handleInviteeLineBusy: async function({ userID }) {\n      const userName = await getUsernameByUserid(userID);\n      this.$message.warning(`${userName}忙线`);\n      this.dissolveMeetingIfNeed();\n    },\n    handleInviterCancel: function() {\n      // 邀请被取消\n      this.isShowNewInvitationDialog = false;\n      this.$message.warning(\"通话已取消\");\n      this.dissolveMeetingIfNeed();\n    },\n    handleKickedOut: function() {\n      //重复登陆，被踢出房间\n      this.$trtcCalling.logout();\n      this.$store.commit(\"userLogoutSuccess\");\n    },\n    // 作为被邀请方会收到，收到该回调说明本次通话超时未应答\n    handleCallTimeout: function() {\n      this.isShowNewInvitationDialog = false;\n      this.$message.warning(\"通话超时未应答\");\n      this.dissolveMeetingIfNeed();\n    },\n    handleCallEnd: function() {\n      this.$message.success(\"通话已结束\");\n      this.$trtcCalling.hangup();\n      this.dissolveMeetingIfNeed();\n      this.$router.push(\"/\");\n    },\n    handleNoResponse: async function({ userID }) {\n      const userName = await getUsernameByUserid(userID);\n      this.$message.warning(`${userName}无应答`);\n      this.dissolveMeetingIfNeed();\n    },\n    handleUserVideoChange: function({ userID, isVideoAvailable }) {\n      log(\n        `handleUserVideoChange userID, ${userID} isVideoAvailable ${isVideoAvailable}`\n      );\n      if (isVideoAvailable) {\n        const muteUserList = this.muteAudioUserIdList.filter(\n          currentID => currentID !== userID\n        );\n        this.$store.commit(\"updateMuteVideoUserIdList\", muteUserList);\n      } else {\n        const muteUserList = this.muteAudioUserIdList.concat(userID);\n        this.$store.commit(\"updateMuteVideoUserIdList\", muteUserList);\n      }\n    },\n    handleUserAudioChange: function({ userID, isAudioAvailable }) {\n      log(\n        `handleUserAudioChange userID, ${userID} isAudioAvailable ${isAudioAvailable}`\n      );\n      if (isAudioAvailable) {\n        const muteUserList = this.muteAudioUserIdList.filter(\n          currentID => currentID !== userID\n        );\n        this.$store.commit(\"updateMuteAudioUserIdList\", muteUserList);\n      } else {\n        const muteUserList = this.muteAudioUserIdList.concat(userID);\n        this.$store.commit(\"updateMuteAudioUserIdList\", muteUserList);\n      }\n    },\n    dissolveMeetingIfNeed() {\n      this.$store.commit(\"updateCallStatus\", \"idle\");\n      this.isShowNewInvitationDialog = false;\n      if (this.meetingUserIdList.length < 2) {\n        this.$store.commit(\"dissolveMeeting\");\n      }\n    }\n  }\n};\n</script>\n\n<style>\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n}\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin: 0;\n  padding: 0;\n  background: aliceblue;\n  height: 100%;\n}\n@media screen and (max-width: 767px) {\n  .el-message {\n    min-width: 180px;\n  }\n}\n</style>\n"]}]}